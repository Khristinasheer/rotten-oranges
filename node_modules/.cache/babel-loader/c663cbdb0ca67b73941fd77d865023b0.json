{"ast":null,"code":"import produce from \"immer\";\nimport { AlgoAction } from \"../actions/algorithmAction\";\nconst initialState = {\n  useLightMode: false\n};\nconst AlgorithmReducer = produce((state = initialState, action) => {\n  let homeInfection = function (grid) {\n    let day = 0;\n    let healthyHouses = 0;\n    let zombieHomes = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 1) healthyHouses++;\n        if (grid[i][j] === 2) zombieHomes.push([i, j]);\n      }\n    }\n\n    const direction = [[0, -1], [0, 1], [-1, 0], [1, 0]];\n\n    while (healthyHouses && zombieHomes.length) {\n      let infectionProgress = [];\n\n      while (zombieHomes.length) {\n        let [x, y] = zombieHomes.pop();\n\n        for (let i = 0; i < 4; i++) {\n          let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n\n          if (grid[x2] && grid[x2][y2] === 1) {\n            grid[x2][y2] = 2;\n            healthyHouses--;\n            infectionProgress.push([x2, y2]);\n          }\n        }\n      }\n\n      zombieHomes = infectionProgress;\n      day++;\n    }\n\n    return healthyHouses ? -1 : day;\n  };\n\n  switch (action.type) {\n    case AlgoAction.SET_ATTRIBUTE:\n      state[action.key] = action.value;\n      break;\n\n    default:\n  }\n\n  return state;\n});\nexport default AlgorithmReducer;","map":{"version":3,"sources":["/Users/khristina/Documents/front-end/interview-homework/src/redux/reducers/algorithm.js"],"names":["produce","AlgoAction","initialState","useLightMode","AlgorithmReducer","state","action","homeInfection","grid","day","healthyHouses","zombieHomes","i","length","j","push","direction","infectionProgress","x","y","pop","x2","y2","type","SET_ATTRIBUTE","key","value"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE;AADK,CAArB;AAIA,MAAMC,gBAAgB,GAAGJ,OAAO,CAAC,CAACK,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACjE,MAAIC,aAAa,GAAG,UAAUC,IAAV,EAAgB;AAClC,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACI,CAAD,CAAJ,CAAQC,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAIN,IAAI,CAACI,CAAD,CAAJ,CAAQE,CAAR,MAAe,CAAnB,EAAsBJ,aAAa;AACnC,YAAIF,IAAI,CAACI,CAAD,CAAJ,CAAQE,CAAR,MAAe,CAAnB,EAAsBH,WAAW,CAACI,IAAZ,CAAiB,CAACH,CAAD,EAAIE,CAAJ,CAAjB;AACvB;AACF;;AACD,UAAME,SAAS,GAAG,CAChB,CAAC,CAAD,EAAI,CAAC,CAAL,CADgB,EAEhB,CAAC,CAAD,EAAI,CAAJ,CAFgB,EAGhB,CAAC,CAAC,CAAF,EAAK,CAAL,CAHgB,EAIhB,CAAC,CAAD,EAAI,CAAJ,CAJgB,CAAlB;;AAOA,WAAON,aAAa,IAAIC,WAAW,CAACE,MAApC,EAA4C;AAC1C,UAAII,iBAAiB,GAAG,EAAxB;;AACA,aAAON,WAAW,CAACE,MAAnB,EAA2B;AACzB,YAAI,CAACK,CAAD,EAAIC,CAAJ,IAASR,WAAW,CAACS,GAAZ,EAAb;;AACA,aAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAI,CAACS,EAAD,EAAKC,EAAL,IAAW,CAACJ,CAAC,GAAGF,SAAS,CAACJ,CAAD,CAAT,CAAa,CAAb,CAAL,EAAsBO,CAAC,GAAGH,SAAS,CAACJ,CAAD,CAAT,CAAa,CAAb,CAA1B,CAAf;;AACA,cAAIJ,IAAI,CAACa,EAAD,CAAJ,IAAYb,IAAI,CAACa,EAAD,CAAJ,CAASC,EAAT,MAAiB,CAAjC,EAAoC;AAClCd,YAAAA,IAAI,CAACa,EAAD,CAAJ,CAASC,EAAT,IAAe,CAAf;AACAZ,YAAAA,aAAa;AACbO,YAAAA,iBAAiB,CAACF,IAAlB,CAAuB,CAACM,EAAD,EAAKC,EAAL,CAAvB;AACD;AACF;AACF;;AACDX,MAAAA,WAAW,GAAGM,iBAAd;AACAR,MAAAA,GAAG;AACJ;;AAED,WAAOC,aAAa,GAAG,CAAC,CAAJ,GAAQD,GAA5B;AACD,GApCD;;AAqCA,UAAQH,MAAM,CAACiB,IAAf;AACE,SAAKtB,UAAU,CAACuB,aAAhB;AACEnB,MAAAA,KAAK,CAACC,MAAM,CAACmB,GAAR,CAAL,GAAoBnB,MAAM,CAACoB,KAA3B;AACA;;AACF;AAJF;;AAMA,SAAOrB,KAAP;AACD,CA7C+B,CAAhC;AA+CA,eAAeD,gBAAf","sourcesContent":["import produce from \"immer\";\nimport { AlgoAction } from \"../actions/algorithmAction\";\nconst initialState = {\n  useLightMode: false,\n};\n\nconst AlgorithmReducer = produce((state = initialState, action) => {\n  let homeInfection = function (grid) {\n    let day = 0;\n    let healthyHouses = 0;\n    let zombieHomes = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 1) healthyHouses++;\n        if (grid[i][j] === 2) zombieHomes.push([i, j]);\n      }\n    }\n    const direction = [\n      [0, -1],\n      [0, 1],\n      [-1, 0],\n      [1, 0],\n    ];\n\n    while (healthyHouses && zombieHomes.length) {\n      let infectionProgress = [];\n      while (zombieHomes.length) {\n        let [x, y] = zombieHomes.pop();\n        for (let i = 0; i < 4; i++) {\n          let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n          if (grid[x2] && grid[x2][y2] === 1) {\n            grid[x2][y2] = 2;\n            healthyHouses--;\n            infectionProgress.push([x2, y2]);\n          }\n        }\n      }\n      zombieHomes = infectionProgress;\n      day++;\n    }\n\n    return healthyHouses ? -1 : day;\n  };\n  switch (action.type) {\n    case AlgoAction.SET_ATTRIBUTE:\n      state[action.key] = action.value;\n      break;\n    default:\n  }\n  return state;\n});\n\nexport default AlgorithmReducer;\n"]},"metadata":{},"sourceType":"module"}