{"ast":null,"code":"// import { initialState } from \"../reducers/algorithm\";\nexport const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\"\n};\nconst initialState = {\n  firstScenarioData: [[1, 0, 1, 1, 0, 2], [1, 1, 1, 2, 1, 0], [0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2], [2, 0, 1, 0, 1, 0]],\n  secondScenarioData: [[2, 0, 1, 0, 1, 2], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1], [2, 0, 1, 1, 0, 2], [1, 0, 0, 0, 1, 0], [2, 1, 0, 0, 2, 0]],\n  firstScenarioDay: 0,\n  secondScenarioDay: 0\n};\n\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\n\nconst homeInfection = async (initialGrid, scenario, targetDay, dispatch) => {\n  const grid = [...initialState[dataKey]];\n\n  if (targetDay !== null) {\n    const dataKey = scenario === 0 ? \"firstScenarioData\" : \"secondScenarioData\";\n    grid = [...initialState[dataKey]];\n    console.log(\"grid\", grid);\n    console.log([...initialState[dataKey]]);\n  }\n\n  if (targetDay === 0) {\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day: 0\n    });\n  }\n\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n    }\n  } //debugger;\n\n\n  const direction = [[0, -1], [0, 1], [-1, 0], [1, 0]];\n\n  while (healthyHouses && zombieHomes.length) {\n    let infectionProgress = [];\n\n    while (zombieHomes.length) {\n      let [x, y] = zombieHomes.pop();\n\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 2;\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n\n    zombieHomes = infectionProgress;\n    day++;\n    console.log(\"day\", day);\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day\n    });\n\n    if (targetDay === day) {\n      break;\n    }\n\n    if (targetDay === null) {\n      await sleep(1000);\n    }\n  }\n\n  return day;\n};\n\nexport const InfectHomes = (scenario, day = null) => (dispatch, getState) => {\n  const grid = scenario === 0 ? getState().AlgorithmReducer.firstScenarioData : getState().AlgorithmReducer.secondScenarioData;\n  homeInfection(grid, scenario, day, dispatch);\n};","map":{"version":3,"sources":["/Users/khristina/Documents/front-end/interview-homework/src/redux/actions/algorithmActions.js"],"names":["AlgorithmActions","INFECT_HOMES","initialState","firstScenarioData","secondScenarioData","firstScenarioDay","secondScenarioDay","sleep","ms","Promise","res","setTimeout","homeInfection","initialGrid","scenario","targetDay","dispatch","grid","dataKey","console","log","type","day","healthyHouses","zombieHomes","i","length","j","push","direction","infectionProgress","x","y","pop","x2","y2","InfectHomes","getState","AlgorithmReducer"],"mappings":"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","sourcesContent":["// import { initialState } from \"../reducers/algorithm\";\nexport const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\",\n};\n\nconst initialState = {\n  firstScenarioData: [\n    [1, 0, 1, 1, 0, 2],\n    [1, 1, 1, 2, 1, 0],\n    [0, 0, 1, 0, 1, 1],\n    [1, 0, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 2],\n    [2, 0, 1, 0, 1, 0],\n  ],\n  secondScenarioData: [\n    [2, 0, 1, 0, 1, 2],\n    [1, 0, 0, 1, 0, 1],\n    [0, 0, 1, 0, 1, 1],\n    [2, 0, 1, 1, 0, 2],\n    [1, 0, 0, 0, 1, 0],\n    [2, 1, 0, 0, 2, 0],\n  ],\n\n  firstScenarioDay: 0,\n  secondScenarioDay: 0,\n};\n\nconst sleep = (ms) => new Promise((res) => setTimeout(res, ms));\n\nconst homeInfection = async (initialGrid, scenario, targetDay, dispatch) => {\n  const grid = [...initialState[dataKey]];\n  if (targetDay !== null) {\n    const dataKey = scenario === 0 ? \"firstScenarioData\" : \"secondScenarioData\";\n    grid = [...initialState[dataKey]];\n    console.log(\"grid\", grid);\n    console.log([...initialState[dataKey]]);\n  }\n  if (targetDay === 0) {\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day: 0,\n    });\n  }\n\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n    }\n  }\n\n  //debugger;\n  const direction = [\n    [0, -1],\n    [0, 1],\n    [-1, 0],\n    [1, 0],\n  ];\n\n  while (healthyHouses && zombieHomes.length) {\n    let infectionProgress = [];\n    while (zombieHomes.length) {\n      let [x, y] = zombieHomes.pop();\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 2;\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n    zombieHomes = infectionProgress;\n    day++;\n    console.log(\"day\", day);\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day,\n    });\n\n    if (targetDay === day) {\n      break;\n    }\n\n    if (targetDay === null) {\n      await sleep(1000);\n    }\n  }\n\n  return day;\n};\n\nexport const InfectHomes = (scenario, day = null) => (dispatch, getState) => {\n  const grid =\n    scenario === 0\n      ? getState().AlgorithmReducer.firstScenarioData\n      : getState().AlgorithmReducer.secondScenarioData;\n\n  homeInfection(grid, scenario, day, dispatch);\n};\n"]},"metadata":{},"sourceType":"module"}