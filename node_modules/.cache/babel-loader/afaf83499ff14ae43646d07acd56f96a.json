{"ast":null,"code":"var _jsxFileName = \"/Users/khristina/Documents/front-end/interview-homework/src/screens/home/home.js\";\nimport React from \"react\";\nimport { HeaderContainer, IconGuide, Text, Box, StyledUl } from \"./Styled\";\nimport { HealthyHome, ZombieHome, EmptyHome } from \"../../svg-icons\";\n\nconst Home = () => {\n  // 0 = Empty Home\n  // 1 = Healthy Home\n  // 2 = Zombie Home\n  var orangesRotting = function (grid) {\n    let minute = 0;\n    let totalFreshOranges = 0; // this stack will contain [x,y] of the rotten oranges\n    // and will be used in while loop as a spreading point.\n\n    let rottenOranges = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        // count fresh oranges\n        if (grid[i][j] === 1) totalFreshOranges++; // find rotten oranges and push it into stack, the reason why we need\n        // to find rotten oranges first is because it will be used to spread to\n        // any other fresh oranges left.\n\n        if (grid[i][j] === 2) rottenOranges.push([i, j]);\n      }\n    } // use for accessing adjacency grids.\n\n\n    const m = [[0, -1], [0, 1], [-1, 0], [1, 0]]; // keep spreading if there still fresh oranges left\n    // and there still rotten orages left to be spread\n\n    while (totalFreshOranges && rottenOranges.length) {\n      // fresh oranges that is adjacent to the rotten oranges\n      //  will be pushed into this and will become rotten oranges!\n      let rottingOranges = [];\n\n      while (rottenOranges.length) {\n        let [x, y] = rottenOranges.pop();\n\n        for (let i = 0; i < 4; i++) {\n          let [x2, y2] = [x + m[i][0], y + m[i][1]]; // if adjacency grid is fresh orange:\n          // make it rotten, decrease total fresh oranges\n          // and push it into stack that will be used for\n          // next round of speading.\n\n          if (grid[x2] && grid[x2][y2] === 1) {\n            grid[x2][y2] = 2;\n            totalFreshOranges--;\n            rottingOranges.push([x2, y2]);\n          }\n        }\n      } // rotting oranges now became rotten oranges,\n      // it will continue to spread until nothing left!\n\n\n      rottenOranges = rottingOranges;\n      minute++;\n    } // if there is any fresh oranges left, return -1, otherwise, return minute;\n\n\n    return totalFreshOranges ? -1 : minute;\n  };\n\n  const firstScenario = [[1, 0, 1, 1, 0, 2], [1, 1, 1, 2, 1, 0], [0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2], [2, 0, 1, 0, 1, 0]];\n  const secondScenario = [[2, 0, 1, 0, 1, 2], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1], [2, 0, 1, 1, 0, 2], [1, 0, 0, 0, 1, 0], [2, 1, 0, 0, 2, 0]];\n  const firstScenarioItems = firstScenario[0].map((i, number) => {\n    // if (number === 2) {\n    //   return (\n    //     <li key={i}>\n    //       <ZombieHome />\n    //     </li>\n    //   );\n    // } else if (number === 1) {\n    //   return (\n    //     <li key={i}>\n    //       <HealthyHome />\n    //     </li>\n    //   );\n    // } else {\n    //   return (\n    //     <li key={i}>\n    //       <EmptyHome />\n    //     </li>\n    //   );\n    // }\n\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, number === 2 ? /*#__PURE__*/React.createElement(ZombieHome, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(HealthyHome, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 42\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HeaderContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Zombies\"), /*#__PURE__*/React.createElement(IconGuide, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EmptyHome, {\n    width: \"40\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Empty Home\"), /*#__PURE__*/React.createElement(HealthyHome, {\n    width: \"40\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Healthy Home\"), /*#__PURE__*/React.createElement(ZombieHome, {\n    width: \"40\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Zombie Home\")), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"A case where all can be infected\"), /*#__PURE__*/React.createElement(StyledUl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, firstScenarioItems)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"A case with effective social distancing\"), /*#__PURE__*/React.createElement(StyledUl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, firstScenarioItems))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/khristina/Documents/front-end/interview-homework/src/screens/home/home.js"],"names":["React","HeaderContainer","IconGuide","Text","Box","StyledUl","HealthyHome","ZombieHome","EmptyHome","Home","orangesRotting","grid","minute","totalFreshOranges","rottenOranges","i","length","j","push","m","rottingOranges","x","y","pop","x2","y2","firstScenario","secondScenario","firstScenarioItems","map","number"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { HeaderContainer, IconGuide, Text, Box, StyledUl } from \"./Styled\";\nimport { HealthyHome, ZombieHome, EmptyHome } from \"../../svg-icons\";\n\nconst Home = () => {\n  // 0 = Empty Home\n  // 1 = Healthy Home\n  // 2 = Zombie Home\n\n  var orangesRotting = function (grid) {\n    let minute = 0;\n    let totalFreshOranges = 0;\n\n    // this stack will contain [x,y] of the rotten oranges\n    // and will be used in while loop as a spreading point.\n    let rottenOranges = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        // count fresh oranges\n        if (grid[i][j] === 1) totalFreshOranges++;\n\n        // find rotten oranges and push it into stack, the reason why we need\n        // to find rotten oranges first is because it will be used to spread to\n        // any other fresh oranges left.\n        if (grid[i][j] === 2) rottenOranges.push([i, j]);\n      }\n    }\n\n    // use for accessing adjacency grids.\n    const m = [\n      [0, -1],\n      [0, 1],\n      [-1, 0],\n      [1, 0],\n    ];\n\n    // keep spreading if there still fresh oranges left\n    // and there still rotten orages left to be spread\n    while (totalFreshOranges && rottenOranges.length) {\n      // fresh oranges that is adjacent to the rotten oranges\n      //  will be pushed into this and will become rotten oranges!\n      let rottingOranges = [];\n\n      while (rottenOranges.length) {\n        let [x, y] = rottenOranges.pop();\n        for (let i = 0; i < 4; i++) {\n          let [x2, y2] = [x + m[i][0], y + m[i][1]];\n\n          // if adjacency grid is fresh orange:\n          // make it rotten, decrease total fresh oranges\n          // and push it into stack that will be used for\n          // next round of speading.\n          if (grid[x2] && grid[x2][y2] === 1) {\n            grid[x2][y2] = 2;\n            totalFreshOranges--;\n            rottingOranges.push([x2, y2]);\n          }\n        }\n      }\n\n      // rotting oranges now became rotten oranges,\n      // it will continue to spread until nothing left!\n      rottenOranges = rottingOranges;\n\n      minute++;\n    }\n\n    // if there is any fresh oranges left, return -1, otherwise, return minute;\n    return totalFreshOranges ? -1 : minute;\n  };\n\n  const firstScenario = [\n    [1, 0, 1, 1, 0, 2],\n    [1, 1, 1, 2, 1, 0],\n    [0, 0, 1, 0, 1, 1],\n    [1, 0, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 2],\n    [2, 0, 1, 0, 1, 0],\n  ];\n  const secondScenario = [\n    [2, 0, 1, 0, 1, 2],\n    [1, 0, 0, 1, 0, 1],\n    [0, 0, 1, 0, 1, 1],\n    [2, 0, 1, 1, 0, 2],\n    [1, 0, 0, 0, 1, 0],\n    [2, 1, 0, 0, 2, 0],\n  ];\n\n  const firstScenarioItems = firstScenario[0].map((i, number) => {\n    // if (number === 2) {\n    //   return (\n    //     <li key={i}>\n    //       <ZombieHome />\n    //     </li>\n    //   );\n    // } else if (number === 1) {\n    //   return (\n    //     <li key={i}>\n    //       <HealthyHome />\n    //     </li>\n    //   );\n    // } else {\n    //   return (\n    //     <li key={i}>\n    //       <EmptyHome />\n    //     </li>\n    //   );\n    // }\n    <li>{number === 2 ? <ZombieHome /> : <HealthyHome />}</li>;\n  });\n\n  return (\n    <>\n      <HeaderContainer>Zombies</HeaderContainer>\n      <IconGuide>\n        <EmptyHome width=\"40\" />\n        <Text>Empty Home</Text>\n        <HealthyHome width=\"40\" />\n        <Text>Healthy Home</Text>\n        <ZombieHome width=\"40\" />\n        <Text>Zombie Home</Text>\n      </IconGuide>\n      <Box>\n        <div>\n          <p>A case where all can be infected</p>\n          <StyledUl>{firstScenarioItems}</StyledUl>\n        </div>\n\n        <div>\n          <p>A case with effective social distancing</p>\n          <StyledUl>{firstScenarioItems}</StyledUl>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}