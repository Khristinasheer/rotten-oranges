{"ast":null,"code":"export const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\"\n};\n\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\n\nconst homeInfection = async (grid, scenario, dispatch) => {\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n  let infectedHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n      if (grid[i][j] === 3) infectedHomes.push([i, j]);\n    }\n  }\n\n  const direction = [[0, -1], [0, 1], [-1, 0], [1, 0]];\n\n  while (healthyHouses && infectedHomes.length) {\n    let infectionProgress = [];\n\n    while (infectedHomes.length) {\n      let [x, y] = infectedHomes.pop();\n      grid[x][y] = 2;\n\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 3;\n          infectesHomes.push([x2, y2]);\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n\n    infectedHomes = infectionProgress;\n    day++;\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day\n    });\n    await sleep(1500);\n  }\n\n  return day;\n};\n\nexport const InfectHomes = scenario => (dispatch, getState) => {\n  const grid = scenario === 0 ? getState().AlgorithmReducer.firstScenarioData : getState().AlgorithmReducer.secondScenarioData;\n  homeInfection(grid, scenario, dispatch);\n};","map":{"version":3,"sources":["/Users/khristina/Documents/front-end/interview-homework/src/redux/actions/algorithmActions.js"],"names":["AlgorithmActions","INFECT_HOMES","sleep","ms","Promise","res","setTimeout","homeInfection","grid","scenario","dispatch","day","healthyHouses","zombieHomes","infectedHomes","i","length","j","push","direction","infectionProgress","x","y","pop","x2","y2","infectesHomes","type","InfectHomes","getState","AlgorithmReducer","firstScenarioData","secondScenarioData"],"mappings":"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","sourcesContent":["export const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\",\n};\n\nconst sleep = (ms) => new Promise((res) => setTimeout(res, ms));\n\nconst homeInfection = async (grid, scenario, dispatch) => {\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n  let infectedHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n      if (grid[i][j] === 3) infectedHomes.push([i, j]);\n    }\n  }\n  const direction = [\n    [0, -1],\n    [0, 1],\n    [-1, 0],\n    [1, 0],\n  ];\n\n  while (healthyHouses && infectedHomes.length) {\n    let infectionProgress = [];\n    while (infectedHomes.length) {\n      let [x, y] = infectedHomes.pop();\n      grid[x][y] = 2;\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 3;\n          infectesHomes.push([x2, y2]);\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n    infectedHomes = infectionProgress;\n    day++;\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n      day,\n    });\n    await sleep(1500);\n  }\n\n  return day;\n};\n\nexport const InfectHomes = (scenario) => (dispatch, getState) => {\n  const grid =\n    scenario === 0\n      ? getState().AlgorithmReducer.firstScenarioData\n      : getState().AlgorithmReducer.secondScenarioData;\n\n  homeInfection(grid, scenario, dispatch);\n};\n"]},"metadata":{},"sourceType":"module"}