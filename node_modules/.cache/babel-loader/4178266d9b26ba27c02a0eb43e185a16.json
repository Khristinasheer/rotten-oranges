{"ast":null,"code":"export const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\"\n};\n\nlet homeInfection = function (grid, scenario, dispatch) {\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n    }\n  }\n\n  const direction = [[0, -1], [0, 1], [-1, 0], [1, 0]];\n\n  while (healthyHouses && zombieHomes.length) {\n    let infectionProgress = [];\n\n    while (zombieHomes.length) {\n      let [x, y] = zombieHomes.pop();\n\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 2;\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n\n    zombieHomes = infectionProgress;\n    day++;\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid\n    });\n  } // return healthyHouses ? -1 : day;\n\n\n  return day;\n};\n\nexport const InfectHomes = scenario => (dispatch, getState) => {\n  const grid = scenario === 0 ? getState().AlgorithmReducer.firstScenarioData : getState().AlgorithmReducer.secondScenarioData;\n  homeInfection(grid, scenario, dispatch);\n};","map":{"version":3,"sources":["/Users/khristina/Documents/front-end/interview-homework/src/redux/actions/algorithmActions.js"],"names":["AlgorithmActions","INFECT_HOMES","homeInfection","grid","scenario","dispatch","day","healthyHouses","zombieHomes","i","length","j","push","direction","infectionProgress","x","y","pop","x2","y2","type","InfectHomes","getState","AlgorithmReducer","firstScenarioData","secondScenarioData"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,YAAY,EAAE;AADgB,CAAzB;;AAIP,IAAIC,aAAa,GAAG,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACtD,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACM,CAAD,CAAJ,CAAQC,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,UAAIR,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,MAAe,CAAnB,EAAsBJ,aAAa;AACnC,UAAIJ,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,MAAe,CAAnB,EAAsBH,WAAW,CAACI,IAAZ,CAAiB,CAACH,CAAD,EAAIE,CAAJ,CAAjB;AACvB;AACF;;AACD,QAAME,SAAS,GAAG,CAChB,CAAC,CAAD,EAAI,CAAC,CAAL,CADgB,EAEhB,CAAC,CAAD,EAAI,CAAJ,CAFgB,EAGhB,CAAC,CAAC,CAAF,EAAK,CAAL,CAHgB,EAIhB,CAAC,CAAD,EAAI,CAAJ,CAJgB,CAAlB;;AAOA,SAAON,aAAa,IAAIC,WAAW,CAACE,MAApC,EAA4C;AAC1C,QAAII,iBAAiB,GAAG,EAAxB;;AACA,WAAON,WAAW,CAACE,MAAnB,EAA2B;AACzB,UAAI,CAACK,CAAD,EAAIC,CAAJ,IAASR,WAAW,CAACS,GAAZ,EAAb;;AACA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAI,CAACS,EAAD,EAAKC,EAAL,IAAW,CAACJ,CAAC,GAAGF,SAAS,CAACJ,CAAD,CAAT,CAAa,CAAb,CAAL,EAAsBO,CAAC,GAAGH,SAAS,CAACJ,CAAD,CAAT,CAAa,CAAb,CAA1B,CAAf;;AACA,YAAIN,IAAI,CAACe,EAAD,CAAJ,IAAYf,IAAI,CAACe,EAAD,CAAJ,CAASC,EAAT,MAAiB,CAAjC,EAAoC;AAClChB,UAAAA,IAAI,CAACe,EAAD,CAAJ,CAASC,EAAT,IAAe,CAAf;AACAZ,UAAAA,aAAa;AACbO,UAAAA,iBAAiB,CAACF,IAAlB,CAAuB,CAACM,EAAD,EAAKC,EAAL,CAAvB;AACD;AACF;AACF;;AACDX,IAAAA,WAAW,GAAGM,iBAAd;AACAR,IAAAA,GAAG;AACHD,IAAAA,QAAQ,CAAC;AACPe,MAAAA,IAAI,EAAEpB,gBAAgB,CAACC,YADhB;AAEPG,MAAAA,QAFO;AAGPD,MAAAA;AAHO,KAAD,CAAR;AAKD,GAtCqD,CAwCtD;;;AACA,SAAOG,GAAP;AACD,CA1CD;;AA4CA,OAAO,MAAMe,WAAW,GAAIjB,QAAD,IAAc,CAACC,QAAD,EAAWiB,QAAX,KAAwB;AAC/D,QAAMnB,IAAI,GACRC,QAAQ,KAAK,CAAb,GACIkB,QAAQ,GAAGC,gBAAX,CAA4BC,iBADhC,GAEIF,QAAQ,GAAGC,gBAAX,CAA4BE,kBAHlC;AAKAvB,EAAAA,aAAa,CAACC,IAAD,EAAOC,QAAP,EAAiBC,QAAjB,CAAb;AACD,CAPM","sourcesContent":["export const AlgorithmActions = {\n  INFECT_HOMES: \"INFECT_HOMES\",\n};\n\nlet homeInfection = function (grid, scenario, dispatch) {\n  let day = 0;\n  let healthyHouses = 0;\n  let zombieHomes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) healthyHouses++;\n      if (grid[i][j] === 2) zombieHomes.push([i, j]);\n    }\n  }\n  const direction = [\n    [0, -1],\n    [0, 1],\n    [-1, 0],\n    [1, 0],\n  ];\n\n  while (healthyHouses && zombieHomes.length) {\n    let infectionProgress = [];\n    while (zombieHomes.length) {\n      let [x, y] = zombieHomes.pop();\n      for (let i = 0; i < 4; i++) {\n        let [x2, y2] = [x + direction[i][0], y + direction[i][1]];\n        if (grid[x2] && grid[x2][y2] === 1) {\n          grid[x2][y2] = 2;\n          healthyHouses--;\n          infectionProgress.push([x2, y2]);\n        }\n      }\n    }\n    zombieHomes = infectionProgress;\n    day++;\n    dispatch({\n      type: AlgorithmActions.INFECT_HOMES,\n      scenario,\n      grid,\n    });\n  }\n\n  // return healthyHouses ? -1 : day;\n  return day;\n};\n\nexport const InfectHomes = (scenario) => (dispatch, getState) => {\n  const grid =\n    scenario === 0\n      ? getState().AlgorithmReducer.firstScenarioData\n      : getState().AlgorithmReducer.secondScenarioData;\n\n  homeInfection(grid, scenario, dispatch);\n};\n"]},"metadata":{},"sourceType":"module"}